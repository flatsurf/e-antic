name: Test
on:
  push: { branches: [ "master" ] }
  pull_request: { branches: [ "master" ] }

jobs:
  test-libeantic:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
        - on: ubuntu-20.04
          libflint: 2.6
        - on: ubuntu-20.04
          libflint: 2.7
        - on: ubuntu-20.04
          libflint: 2.7
          sanitizer: address
        - on: ubuntu-20.04
          libflint: 2.7
          sanitizer: undefined
        - on: ubuntu-20.04
          libflint: 2.7
          sanitizer: valgrind
        - on: ubuntu-20.04
          environment: binder
        - on: macos-10.15
          libflint: 2.6
        - on: macos-10.15
          libflint: 2.7
        - on: macos-10.15
          libflint: 2.7
        - on: macos-10.15
          libflint: 2.7
          sanitizer: address
        - on: macos-10.15
          libflint: 2.7
          sanitizer: undefined
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        shell: bash -l {0}
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"` `[[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]] && echo "--without-byexample"`
          echo "::set-output name=shared::"`[[ "${{ matrix.sanitizer }}" == "address" ]] && echo "-fsanitize=address -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install valgrind
        run: |
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libeantic/environment.yml
          mamba install libflint=${{ matrix.libflint }}
          conda list
        if: ${{ matrix.environment != 'binder' }}
      - name: Create binder environment
        shell: bash -l {0}
        run: |
          wget -O repo2docker.yml https://github.com/jupyterhub/repo2docker/raw/main/repo2docker/buildpacks/conda/environment.yml
          mamba install -n test --quiet -y pytest pytest-xdist byexample
          mamba env update -n test --quiet -f repo2docker.yml
          mamba env update -n test --quiet -f binder/environment.yml
          conda list
        if: ${{ matrix.environment == 'binder' }}
      - name: configure & build & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          ./bootstrap

          echo "::group::configure"
          cd libeantic
          export CFLAGS="$CFLAGS -UNDEBUG ${{ steps.flags.outputs.shared }}"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG ${{ steps.flags.outputs.shared }}"
          export LDFLAGS="$LDFLAGS ${{ steps.flags.outputs.shared }}"
          ./configure --without-benchmark ${{ steps.flags.outputs.configure }} --without-doc

          echo "::group::make"
          make V=1

          echo "::group::test"
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check`
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - uses: flatsurf/actions/show-logs@main
        if: ${{ always() }}
  test-pyeantic:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
          - on: ubuntu-20.04
            python: "3.6"
          - on: ubuntu-20.04
            python: "3.7"
          - on: ubuntu-20.04
            python: "3.8"
          - on: ubuntu-20.04
            python: "3.9"
          - on: macos-10.15
            python: "3.6"
          - on: macos-10.15
            python: "3.7"
          - on: macos-10.15
            python: "3.8"
          - on: macos-10.15
            python: "3.9"
          - on: ubuntu-20.04
            python: "3.9"
            sanitizer: valgrind
          - on: ubuntu-20.04
            python: "3.9"
            sanitizer: address
          - on: macos-10.15
            python: "3.9"
            sanitizer: address
          - on: ubuntu-20.04
            python: "3.9"
            sanitizer: undefined
          - on: macos-10.15
            python: "3.9"
            sanitizer: undefined
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"` `[[ '${{ matrix.environment }}' == "binder" ]] && echo "--without-sage"`
          echo "::set-output name=shared::"`[[ "${{ matrix.sanitizer }}" == "address" ]] && echo "-fsanitize=address -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", python-version: "${{ matrix.python }}", channel-priority: true }
      - name: install valgrind
        run: |
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libeantic/environment.yml
          mamba env update --quiet -n test -f pyeantic/environment.yml
          conda list
        if: ${{ matrix.environment != 'binder' }}
      - name: Create binder environment
        shell: bash -l {0}
        run: |
          wget -O repo2docker.yml https://github.com/jupyterhub/repo2docker/raw/main/repo2docker/buildpacks/conda/environment.yml
          mamba install -n test --quiet -y pytest pytest-xdist byexample
          mamba env update -n test --quiet -f repo2docker.yml
          mamba env update -n test --quiet -f binder/environment.yml
          conda list
        if: ${{ matrix.environment == 'binder' }}
      - name: make ${{ matrix.target }}
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          ./bootstrap

          echo "::group::configure"
          export CFLAGS="$CFLAGS -UNDEBUG ${{ steps.flags.outputs.shared }}"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG ${{ steps.flags.outputs.shared }}"
          export LDFLAGS="$LDFLAGS ${{ steps.flags.outputs.shared }}"
          if [[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]]; then
            export EANTIC_LD_PRELOAD="$CONDA_PREFIX/lib/libasan.so"
            export EANTIC_DYLD_INSERT_LIBRARIES="$CONDA_PREFIX/lib/libasan.dylib"
            # Leak detection reports too many false positives in Python; they
            # disabled it in their CI actually.
            export ASAN_OPTIONS=detect_leaks=0
            # https://bitbucket.org/wlav/cppyy/issues/367/address-sanitizer-reports-a-alloc-dealloc
            export ASAN_OPTIONS="$ASAN_OPTIONS:alloc_dealloc_mismatch=0"
          fi
          ./configure --without-benchmark ${{ steps.flags.outputs.configure }} --without-doc

          echo "::group::make"
          make V=1

          echo "::group::test"
          cd pyeantic
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check`
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - uses: flatsurf/actions/show-logs@main
        if: ${{ always() }}
  distcheck:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        on:
          - ubuntu-20.04
          # standardese 0.6.0 has not been released for macOS yet.
          # - macos-10.15
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libeantic/environment.yml
          mamba env update --quiet -n test -f pyeantic/environment.yml
          mamba env update --quiet -n test -f doc/environment.yml
          conda list
      - name: make distcheck
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          ./bootstrap

          echo "::group::configure"
          ./configure

          echo "::group::make distcheck"
          EXTRA_STANDARDESE_FLAGS=-I${CONDA_PREFIX}/include make distcheck
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - uses: flatsurf/actions/show-logs@main
        if: ${{ always() }}

env:
  MAKEFLAGS: -j2
