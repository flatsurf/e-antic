==================
e-antic Change Log
==================

.. current developments

v1.0.0-rc.12
====================

**Added:**

* run CI on macOS & Linux
* added `renf_class::get_pword` to extract the number field set with `renf_class::set_pword` to ease migration of legacy code.
* added `.map` files so only API symbols get exported when running `./configure --with-version-script`.
+ added visibility attributes to header files; this will be necessary on Windows and allows compilation with `-fvisibility=hidden`

**Fixed:**

* set pins in conda packages as they are in https://github.com/conda-forge/conda-forge-pinning-feedstock
* adapt to changes in cppyy 1.9.0
* `E_ANTIC_RELEASE` now reports the correct version number, i.e., 10000.



v1.0.0-rc.11
====================

**Fixed:**

* fixed pyeantic version bump in rever script



v1.0.0-rc.10
====================

**Added:**

* Conda packages are now uploaded automatically to the flatsurf channel with every release.
* integrated pyeantic into the e-antic repository



v1.0.0-rc.9
====================

**Changed:**

* Split the header `e-antic/poly_extra.h` into `e-antic/fmpz_poly_extra.h` and
  `e-antic/fmpq_poly_extra.h`. Typically, you do not want to include either of
  those as they are mostly meant to be used internally.

**Fixed:**

* Either side of a floor division may now be rational.



v1.0.0-rc.8
====================

**Added:**

* `renf_elem_class::floordiv()` to perform `(a/b).floor()` more efficiently

**Changed:**

* changed renf_elem generator to always start with the zero element since it
  probably does not get generated by chance and can obviously cause a lot of
  trouble.



v1.0.0-rc.7
====================



v1.0.0-rc.6
====================



v1.0.0-rc.5
====================

**Added:**

* floor division of `renf_elem_t`
* added the missing implementations of free `floor`, `ceil`, and `pow` functions to the C++ library.

**Changed:**

* simplified testing of binary operators
* Comparison operators of `renf_elem_class` are now free so they participate in
  implicit casts in the same way like the boost generated free operators that
  are derived from them.

**Fixed:**

* Adapted to changes in unique-factory.
* implemented `renf_elem_class(renf_class, std::vector)` constructors that went missing in 39e1215e421e128b230fb62ff88ae0ac9b6414e7.

**Performance:**

* Speed up `renf_class::operator==`



v1.0.0-rc.3
====================

**Fixed:**

* release tarball was missing some header files with long names



v1.0.0-rc.2
====================

**Added:**

* ` renf_elem_swap(renf_elem_t, renf_elem_t)`
* There is now `e-antic/renfxx_fwd.h` if you only need forward declarations of
  `renf_class` and `renf_elem_class`.
* `renf_elem_class` can now be created from signed and unsigned long long.
* `renf_elem_class` can now be created from vectors of primitive integers, e.g.,
  ```
  renf_elem_class x(K, {1, 2, 3}); // = 3*x^2 + 2*x + 1
  ```
  where before the entries of the vector had to be `mpz_class`.
* Move semantics `&&` have been added to `renf_elem_class`.
* There is now support for serialization with cereal. See t-cereal.cpp for
  examples on how to use it.
* the release process has been automated with [rever](https://regro.github.io/rever-docs/)

**Changed:**

* `e-antic/renfxx.h` now requires C++17.
* All classes are now declared in the namespace `eantic`.
* The semantics of `operator =` have changed. In e-antic 0.1 the following
  would create the unit in the field K.
  ```
  renf_elem_class x(K);
  x = 1;
  ```
  Now the above statement makes x a rational number. More generally, an
  assignment resets the number field so that after `x = y` the condition
  `x.nf == renf_elem_class(y).nf` holds. To mimic the old behavior you need
  to rewrite the above as
  ```
  renf_elem_class x(K);
  x = renf_elem_class(K, 1);
  ```
* `renf_class` is now hidden behind a factory to get shared_ptr semantics
  everywhere. Create a `renf_class` by calling `renf_class::make(â€¦)`. This
	returns a smart pointer, so you might have to replace some `.` with `->`.
* The change of semantics in assignment also affects reading from streams (in
  order to create `renf_elem_class`). Before the following would parse an element
  into a number field:
  ```
  renf_elem_class x(K);
  in >> x;
  ```
  Now this only works if the stream contains a rational number. (Otherwise an
  exception is raised.) As `in >> x` also resets `x.nf`. The above code should
  be replaced with:
  ```
  renf_elem_class x;
  K.set_pword(in);
  in >> x;
  ```
* `string renf_class::gen_name` is now a method so it needs to be called.
* Many operations that threw an exception before when domains were mixed, now
  abort program execution (typically through a call to `assert()`.) You are not
  supposed to mix domains unless explicitly stated otherwise.
* `renf_class.operator==` now also checks that the generator name is the same.
  Similarly, `renf_class.operator=` now also resets the generator name.

**Deprecated:**

* Some methods have been deprecated and might be removed in a future release,
  mostly to make the interface more consistent. The deprecation warnings give
  hints which methods to use instead.

**Removed:**

* `renf_elem_class(string&)` has been removed. If you want to parse a rational
  number, use `renf_elem_class(mpq_class(string))`. If you want to parse into a
  number field, use `renf_elem_class(renf_class&, string&)`.
* `renf_elem_class::operator=(string&)` has been removed. If you want to parse
  a rational into an element, use `x = mpq_class(string)`. If you want to parse
  into a number field, use `x = renf_elem_class(x.parent(), string)`.
* `renf_elem_class(vector<...>)` have been removed as it would have thrown an
  exception always anyway.
* `renf_elem_class::operator=(vector<...>)` have been removed due to the change
  of semantics of `=`. If `x` is not a rational you get the same behaviour as
  before with `x = renf_elem_class(x.parent(), {1, 2, 3})`.
* `renf_class::xalloc()` has been removed and replaced by an implementation
  detail.

**Fixed:**

* e-antic had claimed to be thread safe via an open MP pragma (in the number
  field refinement). In some cases, there was a problem with thread-safety. We
  now require users to explicitly mark multithreaded sections by forbidding
  mutations to a renf, see `renf_set_immutable`. As a result, there are some
  operations that cannot be done anymore in a multi-threaded environment but
  they now fail properly (instead of leading to random crashes.)



v0.1
====

**Added:**

* real roots isolation and refinement (poly_extra.h)
* renf structure (renf.h)
* renf_elem structures (renf_elem.h)
* C++ interface (renfxx.h)

